import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam

csv_file_path = input("Enter the path to the CSV file containing stock price data: ")
seq_length = int(input("Enter the sequence length for training: "))
num_lstm_units = int(input("Enter the number of LSTM units: "))
batch_size = int(input("Enter the batch size for training: "))
num_epochs = int(input("Enter the number of training epochs: "))

data = pd.read_csv(csv_file_path)
prices = data['Close'].values.reshape(-1, 1)

scaler = MinMaxScaler()
prices_scaled = scaler.fit_transform(prices)

train_size = int(len(prices_scaled) * 0.8)
train_data = prices_scaled[:train_size]
test_data = prices_scaled[train_size:]

def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i+seq_length])
        y.append(data[i+seq_length])
    return np.array(X), np.array(y)

X_train, y_train = create_sequences(train_data, seq_length)
X_test, y_test = create_sequences(test_data, seq_length)

model = Sequential()
model.add(LSTM(num_lstm_units, input_shape=(seq_length, 1)))
model.add(Dense(1))
model.compile(optimizer=Adam(), loss='mean_squared_error')

model.fit(X_train, y_train, epochs=num_epochs, batch_size=batch_size)

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

plt.figure(figsize=(12, 6))
plt.plot(data.index[train_size+seq_length:], test_data, label='Actual Prices', color='blue')
plt.plot(data.index[train_size+seq_length:], predictions, label='Predicted Prices', color='red')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('Stock Price Prediction')
plt.show()
